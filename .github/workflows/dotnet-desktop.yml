name: .NET Desktop (Build & Publish)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-publish:
    runs-on: windows-latest

    env:
      SOLUTION_NAME: OnScreen-GIF-WPF.sln          
      PROJECT_PATH: OnScreen-GIF-WPF/OnScreen-GIF-WPF.csproj 
      TARGET_FRAMEWORK: net9.0-windows             
      SELF_CONTAINED: true   
      RUNTIME: win-x64            

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-packages-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          nuget-packages-${{ runner.os }}-

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Setup MSBuild (adds msbuild to PATH)
      uses: microsoft/setup-msbuild@v2

    - name: Restore solution
      run: dotnet restore ${{ env.SOLUTION_NAME }}

    - name: Build solution (Release)
      run: dotnet build ${{ env.SOLUTION_NAME }} -c Release --no-restore

    - name: Run tests (if any)
      shell: pwsh
      run: |
        $testProjects = Get-ChildItem -Recurse -Filter *.Tests.csproj
        if ($testProjects.Count -gt 0) {
          dotnet test -c Release --no-build
        } else {
          Write-Host "No test projects found. Skipping tests."
        }

    - name: Publish single-file (Release)
      run: |
        dotnet publish "${{ env.PROJECT_PATH }}" `
          -c Release `
          -r ${{ env.RUNTIME }} `
          -f ${{ env.TARGET_FRAMEWORK }} `
          -p:PublishSingleFile=true `
          -p:SelfContained=${{ env.SELF_CONTAINED }} `
          -p:PublishTrimmed=false `
          -o ./publish

    - name: List published files
      run: dir publish

    # Optional: Sign binary (пример, раскомментируйте и настройте если используете PFX + signtool)
    # - name: Decode PFX
    #   if: ${{ secrets.Base64_Encoded_Pfx && secrets.Pfx_Key }}
    #   shell: powershell
    #   run: |
    #     echo "${{ secrets.Base64_Encoded_Pfx }}" | Out-File -Encoding ascii cert.b64
    #     certutil -decode cert.b64 cert.pfx
    #     $pwd = '${{ secrets.Pfx_Key }}'
    #     Import-PfxCertificate -FilePath cert.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $pwd -AsPlainText -Force)

    # - name: Sign EXE with signtool (example)
 
      uses: actions/upload-artifact@v4
      with:
        name: on-screen-player-publish
        path: publish
