name: Build and Release on push

on:
  push:    # срабатывает при каждом новом коммите (push)

permissions:
  contents: write

jobs:
  build_and_release:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Detect project (.csproj)
        id: detect
        shell: pwsh
        run: |
          $proj = Get-ChildItem -Path . -Filter *.csproj -Recurse | Select-Object -First 1
          if (-not $proj) {
            Write-Error "No .csproj found in repository"
            exit 1
          }
          $rel = $proj.FullName.Substring($PWD.Path.Length + 1) -replace '\\','/'
          $dirRel = Split-Path $rel -Parent
          echo "project_path=$rel" >> $GITHUB_OUTPUT
          echo "project_dir=$dirRel" >> $GITHUB_OUTPUT
          Write-Host "Detected project: $rel"
          Write-Host "Project dir: $dirRel"

      - name: Restore dependencies
        shell: pwsh
        run: dotnet restore "${{ steps.detect.outputs.project_path }}"

      - name: Publish single-file (Release)
        shell: pwsh
        env:
          RUNTIME: win-x64
          TARGET_FRAMEWORK: net9.0-windows
          SELF_CONTAINED: true
        run: |
          dotnet publish "${{ steps.detect.outputs.project_path }}" -c Release -r $env:RUNTIME -f $env:TARGET_FRAMEWORK -p:PublishSingleFile=true -p:SelfContained=$env:SELF_CONTAINED -p:PublishTrimmed=false -o ./publish

      - name: Show publish folder contents (debug)
        shell: pwsh
        run: |
          if (Test-Path ./publish) {
            Get-ChildItem -Path ./publish -Recurse | Format-Table -AutoSize
          } else {
            Write-Error "Publish folder not found"
            exit 1
          }

      - name: Create zip of publish folder
        shell: pwsh
        run: |
          Compress-Archive -Path ./publish/* -DestinationPath ./publish/OnScreen-GIF-WPF.zip -Force

      - name: Create GitHub Release (per commit)
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}                    # уникальный тег — SHA коммита
          release_name: ${{ github.ref_name }}-${{ github.sha }}
          body: "Automated CI build for commit ${{ github.sha }} on ${{ github.ref }}"
          draft: false
          prerelease: false

      - name: Upload release asset (zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/OnScreen-GIF-WPF.zip
          asset_name: OnScreen-GIF-WPF.zip
          asset_content_type: application/zip
